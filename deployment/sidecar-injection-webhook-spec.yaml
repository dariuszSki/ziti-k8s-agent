---
apiVersion: v1
kind: Namespace
metadata:
  name: test-ziti-sidecar

---
apiVersion: cert-manager.io/v1
kind: Issuer
metadata:
  name: selfsigned-issuer
  namespace: test-ziti-sidecar
spec:
  selfSigned: {}

---
apiVersion: cert-manager.io/v1
kind: Certificate
metadata:
  name: ziti-sidecar-injector-cert
  namespace: test-ziti-sidecar
spec:
  secretName: ziti-sidecar-injector-server-cert
  duration: 2160h # 90d
  renewBefore: 360h # 15d
  subject:
    organizations:
    - netfoundry
  commonName: ziti-sidecar-injector-service.test-ziti-sidecar.svc
  isCA: false
  privateKey:
    algorithm: RSA
    encoding: PKCS1
    size: 2048
    rotationPolicy: Always
  usages:
    - server auth
    - client auth
  dnsNames:
  - ziti-sidecar-injector-service.test-ziti-sidecar.svc.cluster.local
  - ziti-sidecar-injector-service.test-ziti-sidecar.svc
  issuerRef:
    kind: Issuer
    name: selfsigned-issuer

---
apiVersion: v1
kind: Service
metadata:
  name: ziti-sidecar-injector-service
  namespace: test-ziti-sidecar
spec:
  selector:
    app: ziti-sidecar-injector-webhook
  ports:
    - name: https
      protocol: TCP
      port: 443
      targetPort: 9443
  type: ClusterIP

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: ziti-sidecar-injector-wh-deployment
  namespace: test-ziti-sidecar
spec:
  replicas: 1
  selector:
    matchLabels:
      app: ziti-sidecar-injector-webhook
  template:
    metadata:
      labels:
        app: ziti-sidecar-injector-webhook
    spec:
      containers:
      - name: ziti-sidecar-injector
        image: docker.io/elblag91/ziti-agent-wh:0.3.1
        imagePullPolicy: Always
        ports:
        - containerPort: 9443
        args:
          - webhook
          # - --tls-cert-file
          # - /home/ziggy/cert.pem
          # - --tls-private-key-file 
          # - /home/ziggy/key.pem
        env:
          - name: TLS-CERT
            valueFrom:
              secretKeyRef:
                name: ziti-sidecar-injector-server-cert
                key: tls.crt
          - name: TLS-PRIVATE-KEY
            valueFrom:
              secretKeyRef:
                name: ziti-sidecar-injector-server-cert
                key: tls.key
          - name: ZITI_CTRL_ADDRESS
            valueFrom:
              configMapKeyRef:
                name: ziti-ctrl-cfg
                key:  address
          - name: ZITI_CTRL_ADMIN_CERT
            valueFrom:
              secretKeyRef:
                name: ziti-ctrl-tls
                key:  tls.crt
          - name: ZITI_CTRL_ADMIN_KEY
            valueFrom:
              secretKeyRef:
                name: ziti-ctrl-tls
                key:  tls.key
          - name: ZITI_ROLE_KEY
            valueFrom:
              configMapKeyRef:
                name: ziti-ctrl-cfg
                key:  zitiRoleKey
          - name: POD_SECURITY_CONTEXT_OVERRIDE
            valueFrom:
              configMapKeyRef:
                name: ziti-ctrl-cfg
                key:  podSecurityContextOverride
          - name: SEARCH_DOMAIN_LIST
            valueFrom:
              configMapKeyRef:
                name: ziti-ctrl-cfg
                key:  SearchDomainList

---
apiVersion: admissionregistration.k8s.io/v1
kind: MutatingWebhookConfiguration
metadata:
  name: ziti-tunnel-sidecar
  annotations:
    cert-manager.io/inject-ca-from: test-ziti-sidecar/ziti-sidecar-injector-cert
webhooks:
  - name: tunnel.ziti.webhook
    admissionReviewVersions: ["v1"]
    namespaceSelector:
      matchLabels:
        openziti/ziti-tunnel: enabled
    rules:
      - operations: ["CREATE","UPDATE","DELETE"]
        apiGroups: [""]
        apiVersions: ["v1","v1beta1"]
        resources: ["pods"]
        scope: "*"
    clientConfig:
      service:
        name: ziti-sidecar-injector-service
        namespace: test-ziti-sidecar
        port: 443
        path: "/ziti-tunnel"
      caBundle: "LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUdPakNDQkNLZ0F3SUJBZ0lVVHZPVnlqemFBakdnajE2bTA2cHpjcGxBMk40d0RRWUpLb1pJaHZjTkFRRUwKQlFBd2RERUxNQWtHQTFVRUJoTUNWVk14Q3pBSkJnTlZCQWdNQWs1RE1SSXdFQVlEVlFRSERBbERhR0Z5Ykc5MApkR1V4RXpBUkJnTlZCQW9NQ2s1bGRFWnZkVzVrY25reEVUQVBCZ05WQkFzTUNFOXdaVzVhYVhScE1Sd3dHZ1lEClZRUUREQk5hYVhScElGQnZaQ0JEYjI1MGNtOXNiR1Z5TUI0WERUSTBNRFV3TVRFNE1EWXpOVm9YRFRNME1EUXkKT1RFNE1EWXpOVm93ZERFTE1Ba0dBMVVFQmhNQ1ZWTXhDekFKQmdOVkJBZ01BazVETVJJd0VBWURWUVFIREFsRAphR0Z5Ykc5MGRHVXhFekFSQmdOVkJBb01DazVsZEVadmRXNWtjbmt4RVRBUEJnTlZCQXNNQ0U5d1pXNWFhWFJwCk1Sd3dHZ1lEVlFRRERCTmFhWFJwSUZCdlpDQkRiMjUwY205c2JHVnlNSUlDSWpBTkJna3Foa2lHOXcwQkFRRUYKQUFPQ0FnOEFNSUlDQ2dLQ0FnRUFsMURnZGJJMkdLWTl0UU5EOGgxbTBibnlGbVZZclo5am1leUtRcUIreGZiSwpHNEpOcnFtdEdiSmtndUpVOVBaNmxsMTZjam1wUm1ERmp2NDZ0cDhTYWh2alUyeVRPV3dlTmY5WTloZWJmMk84CjkrdzBITXdab0VmUzNWS1VqVXFMcEtGN3lXeVA5ek9icGdoSFc2WHQwQVJFT0s4WXdrTE9BcXlKR2JWNVJjOXYKTlVWOEtnUWwvR1Q0UWs1SklvYitOVk1EenFNUmJVL083dW1sNHVSL3ZOZHVKc1B4dDExbDNjY3YyQTJkZXc2dgpNYXFVcEZzUFVQajUwai9pS1JoSTh5TlYxem9ub1lOUm91QXNJaHN0bWRSOVdLTEE2cVFXQmJPanNCKytpRzNhClp4ZkVBL2V3dW14a0dKV2FKaE1qcjFhNnZieldxUThLK3RzRGMyb29lNUpzcG5OU2ZQakVFc2FZME5Cc0hBdVIKUVdselhNcFdma2ZJc2Erdkc4Tkl0SmFoMW5TUExVMVRpWDR3aWxNSlFadlcrRVhXRnlmUnJBdTZsQ2tLMXdpKwpOaGcwcDhWVFp3djZUclRyQXVWVTlzWDJyV0c3bVN2R1lOdjF6K0dFTk5ISWR2elcwWUQ3ZGRNMThHanlEQ3h0CjZnMUpmZFV6T29uSDZPdFVISXNOYjRtcEJjVC8xOUtENVJxdFoyYXBzdUJ1YTBLUUpKVHpCdkhFd25mUmtRMngKMG8yUU9SWXJiQ2VBMm5LY2Vxc2dITis1RnA3VGN1M24xZ3ZJUTc3K3MxbU41bW1nRGZaQ1dWRDRPOGFNbUY5OQp0a2plU1dlejk5bDhjdUdvUXo3cmRDVW03YlVVRWNKNDlLZmdTYnlHL09XRXdvNWpQVG9ONmlIWCtvVXl4V2tDCkF3RUFBYU9Cd3pDQndEQWRCZ05WSFE0RUZnUVVwU0diN1hsa0xTSGNuKzEyZU8zaFFtaEh1Ymt3SHdZRFZSMGoKQkJnd0ZvQVVwU0diN1hsa0xTSGNuKzEyZU8zaFFtaEh1Ymt3RHdZRFZSMFRBUUgvQkFVd0F3RUIvekJ0QmdOVgpIUkVFWmpCa2dpWjZhWFJwTFhOcFpHVmpZWEl0YVc1cVpXTjBiM0l0YzJWeWRtbGpaUzU2YVhScExuTjJZNEkwCmVtbDBhUzF6YVdSbFkyRnlMV2x1YW1WamRHOXlMWE5sY25acFkyVXVlbWwwYVM1emRtTXVZMngxYzNSbGNpNXMKYjJOaGJJY0Vmd0FBQVRBTkJna3Foa2lHOXcwQkFRc0ZBQU9DQWdFQWxDRlRzSDlXeGE2YjBINE5YZmhpUVBQRgpCU3lQRlVkZlJZVWNMeGNPOC9VMXQ0S1JEL2NMdDQwcmxhT2ZrRE01dHRoaUpwbHoxRzdPK2U0dndXRk1qRnQ3CjdyUTVVOFdOSi9tUE1UanI0N3BFNUFzUHhGOHR6em1ySHE5S3hKdjFtWjk4WFpiUlQxZlBpeGNTUVFvYlovSFMKcnY1KzVrN1pjcC9SUkR5REtaVy9lbVpwUUxWQW9XdXhkMitVVWpuZHNXc3pxVzZ0a0x2VkFmSnRULzNhY2dBQwozUVBLanMvRG4xNjlXamZRNm8xM05DT0hCcHVTUDluY0pVUytWQmJDQko4QVJiVTFhdG0zSEJHZFpTT0VvWDM2Cmh4bngvM1c0KzZKRW9NbUVMTDFzb0F6dFRPK2NYNWJSRFYrcXlLMXFtQ0ZJb3ZmWFlnT0FBa3BKalhJRG5YSUwKVTJsUFM0enh5Y3JOZytXZVNoWXp5NjZkc0c5WDBndVdiTm9QTDRReHc4bS9ESWFhb3FkTW9WWkorWGlmMHE4agpFQVYwVm9SY3l0c0hZZ2lkNDlVT01uZmhWaDl3TW5ja0tmNGE1ZVAvb2FvcWVBbHZSZlUzZEo3LzErTTZ3SlZyCitwSGZoa3hucEFRZEVZY3FObzU5azlJVGYvTzYxaXZIdTI5UkJTRVVaMUViK3NBQ2E5aUM5TGlvWEEvT3VXcHkKcFV0ejU2bnI1VmZjY0w3MkRRenl0WGQ3SDk0bEdXMno1ZTljaDJoMTNlSkxyZ2JNRDdxMFAySXY4aG5ic05UVwpXd2o5L2lrZURocTBlNCtRRkIrNC9jMWFleGhtckdRZG10OFBkOWVwVUtnMGdLcTlaVHpMbmtxanFnUXUrYlVHCnQxaVEvUXJzVDlLbDBXMjBJRkU9Ci0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0="
    failurePolicy: Ignore
    sideEffects: None
    timeoutSeconds: 30

---
kind: ClusterRole
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  namespace: test-ziti-sidecar
  name: ziti-agent-wh-roles
rules:
- apiGroups: [""] # "" indicates the core API group
  resources: ["secrets"]
  verbs: ["get", "list", "create", "delete"]
- apiGroups: [""]
  resources: ["services"]
  verbs: ["get"]

---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: ziti-agent-wh
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: ziti-agent-wh-roles
subjects:
- kind: ServiceAccount
  name: default
  namespace: test-ziti-sidecar

---
apiVersion: v1
kind: Secret
metadata:
  name: ziti-ctrl-tls
  namespace: test-ziti-sidecar
type: kubernetes.io/tls
stringData:
  tls.crt: $NF_ADMIN_IDENTITY_CERT
  tls.key: $NF_ADMIN_IDENTITY_KEY
  tls.ca:  $NF_ADMIN_IDENTITY_CA

---
apiVersion: v1
kind: ConfigMap
metadata:
  name: ziti-ctrl-cfg
  namespace: test-ziti-sidecar
data:
  address: "{https://your_fqdn:port}"
  zitiRoleKey: identity.openziti.io/role-attributes
  podSecurityContextOverride: "true"
  SearchDomainList: cluster.local,test-ziti-sidecar.svc

